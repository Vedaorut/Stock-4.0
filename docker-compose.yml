version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: telegram-shop-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-telegram_shop}
      POSTGRES_USER: ${POSTGRES_USER:-admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_INITDB_ARGS: "-E UTF8 --locale=en_US.UTF-8"
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/database/schema.sql:/docker-entrypoint-initdb.d/1-schema.sql
      - ./backend/database/indexes.sql:/docker-entrypoint-initdb.d/2-indexes.sql
    networks:
      - telegram-shop-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-admin} -d ${POSTGRES_DB:-telegram_shop}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: telegram-shop-backend
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3000
      DATABASE_URL: postgresql://${POSTGRES_USER:-admin}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-telegram_shop}
      JWT_SECRET: ${JWT_SECRET}
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      BLOCKCHAIN_INFO_API_KEY: ${BLOCKCHAIN_INFO_API_KEY:-}
      ETHERSCAN_API_KEY: ${ETHERSCAN_API_KEY}
      TONCENTER_API_KEY: ${TONCENTER_API_KEY:-}
      CORS_ORIGIN: ${CORS_ORIGIN:-*}
    ports:
      - "${BACKEND_PORT:-3000}:3000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - telegram-shop-network
    volumes:
      - ./backend/logs:/app/logs
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Telegram Bot
  bot:
    build:
      context: ./bot
      dockerfile: Dockerfile
    container_name: telegram-shop-bot
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      BACKEND_URL: http://backend:3000
      WEBAPP_URL: ${WEBAPP_URL}
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - telegram-shop-network
    volumes:
      - ./bot/logs:/app/logs

  # WebApp (Nginx serving static files)
  webapp:
    build:
      context: ./webapp
      dockerfile: Dockerfile
      args:
        VITE_API_URL: ${VITE_API_URL:-http://localhost:3000}
    container_name: telegram-shop-webapp
    restart: unless-stopped
    ports:
      - "${WEBAPP_PORT:-80}:80"
      - "${WEBAPP_SSL_PORT:-443}:443"
    networks:
      - telegram-shop-network
    volumes:
      - ./webapp/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./webapp/nginx/ssl:/etc/nginx/ssl:ro
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis (optional, for caching and sessions)
  redis:
    image: redis:7-alpine
    container_name: telegram-shop-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - telegram-shop-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: redis-server --appendonly yes

  # pgAdmin (optional, for database management)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: telegram-shop-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@admin.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    depends_on:
      - postgres
    networks:
      - telegram-shop-network
    profiles:
      - dev

networks:
  telegram-shop-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
