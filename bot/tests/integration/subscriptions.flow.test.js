/**
 * Subscriptions Flow Integration Test
 *
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç subscribe/unsubscribe flow —Å –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å—é –∏ button flip
 */

import { describe, it, expect, beforeEach, afterEach } from '@jest/globals';
import MockAdapter from 'axios-mock-adapter';
import { createTestBot } from '../helpers/testBot.js';
import { callbackUpdate } from '../helpers/updateFactories.js';
import { findButton } from '../helpers/callsCaptor.js';
import { api } from '../../src/utils/api.js';

describe('Subscriptions Flow - Subscribe/Unsubscribe/Idempotency (P0)', () => {
  let testBot;
  let mock;

  const shopId = '123';
  const mockShop = {
    id: shopId,
    name: 'Test Shop',
    description: 'Test Shop Description',
    seller_username: 'testseller',
    seller_first_name: 'Test Seller'
  };

  const mockProducts = [
    { id: 1, name: 'Product 1', price: 10.00 },
    { id: 2, name: 'Product 2', price: 20.00 }
  ];

  beforeEach(() => {
    testBot = createTestBot({
      skipAuth: true,
      mockSession: {
        token: 'test-jwt-token',
        user: { id: 1, telegramId: '123456', selectedRole: 'buyer' }
      }
    });
    mock = new MockAdapter(api);
  });

  afterEach(() => {
    testBot.reset();
    mock.reset();
  });

  it('–ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–∞–≥–∞–∑–∏–Ω: shop:view ‚Üí subscribe ‚Üí –∫–Ω–æ–ø–∫–∞ flip ‚Üí unsubscribe ‚Üí –∫–Ω–æ–ø–∫–∞ flip', async () => {
    // Step 1: View shop (not subscribed)
    mock.onGet(`/shops/${shopId}`).reply(200, { data: mockShop });
    // ‚úÖ FIX: API –∏—Å–ø–æ–ª—å–∑—É–µ—Ç /products?shopId=X, –∞ –ù–ï /products/shop/X
    mock.onGet('/products').reply(200, { data: mockProducts });
    mock.onGet(`/subscriptions/check/${shopId}`).reply(200, {
      data: { subscribed: false }
    });

    await testBot.handleUpdate(callbackUpdate(`shop:view:${shopId}`));

    // ‚úÖ FIX: –î–∞—Ç—å –≤—Ä–µ–º—è –Ω–∞ async API calls (3 calls: getShop, getProducts, checkSubscription)
    await new Promise(resolve => setImmediate(resolve));

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ answerCbQuery –±—ã–ª –≤—ã–∑–≤–∞–Ω
    expect(testBot.captor.wasAnswerCbQueryCalled()).toBe(true);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞ "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"
    const markup1 = testBot.getLastMarkup();
    const subscribeBtn = findButton('üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', markup1);
    expect(subscribeBtn).toBeTruthy();
    expect(subscribeBtn.callback_data).toBe(`subscribe:${shopId}`);

    testBot.captor.reset();

    // Step 2: Subscribe to shop
    mock.onPost(`/subscriptions`).reply(200, { data: { shopId, userId: 1 } });
    mock.onGet(`/shops/${shopId}`).reply(200, { data: mockShop });
    mock.onGet(`/subscriptions/check/${shopId}`).reply(200, {
      data: { subscribed: false } // Before subscribe
    });

    await testBot.handleUpdate(callbackUpdate(`subscribe:${shopId}`));

    // ‚úÖ FIX: –î–∞—Ç—å –≤—Ä–µ–º—è –Ω–∞ async subscribe API call
    await new Promise(resolve => setImmediate(resolve));

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º answerCbQuery —Å —É—Å–ø–µ—à–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    expect(testBot.captor.wasAnswerCbQueryCalled()).toBe(true);
    const answers = testBot.captor.getAnswers();
    expect(answers.some(a => a.text === '‚úÖ –ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å!')).toBe(true);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –Ω–∞ "–ü–æ–¥–ø–∏—Å–∞–Ω"
    const markup2 = testBot.getLastMarkup();
    const subscribedBtn = findButton('‚úÖ –ü–æ–¥–ø–∏—Å–∞–Ω', markup2);
    expect(subscribedBtn).toBeTruthy();
    expect(subscribedBtn.callback_data).toBe('noop:subscribed');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞ "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è"
    const unsubscribeBtn = findButton('üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è', markup2);
    expect(unsubscribeBtn).toBeTruthy();
    expect(unsubscribeBtn.callback_data).toBe(`unsubscribe:${shopId}`);

    testBot.captor.reset();

    // Step 3: –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å)
    mock.onGet(`/subscriptions/check/${shopId}`).reply(200, {
      data: { subscribed: true } // Already subscribed
    });
    mock.onGet(`/shops/${shopId}`).reply(200, { data: mockShop });

    await testBot.handleUpdate(callbackUpdate(`subscribe:${shopId}`));

    // ‚úÖ FIX: –î–∞—Ç—å –≤—Ä–µ–º—è –Ω–∞ async check subscription call
    await new Promise(resolve => setImmediate(resolve));

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–∫–∞–∑–∞–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const answers2 = testBot.captor.getAnswers();
    expect(answers2.some(a => a.text === '‚ÑπÔ∏è –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ—Ç –º–∞–≥–∞–∑–∏–Ω')).toBe(true);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ markup –æ—Å—Ç–∞–ª—Å—è —Å –∫–Ω–æ–ø–∫–æ–π "–ü–æ–¥–ø–∏—Å–∞–Ω"
    const markup3 = testBot.getLastMarkup();
    const stillSubscribedBtn = findButton('‚úÖ –ü–æ–¥–ø–∏—Å–∞–Ω', markup3);
    expect(stillSubscribedBtn).toBeTruthy();

    testBot.captor.reset();

    // Step 4: Unsubscribe from shop
    mock.onDelete(`/subscriptions/${shopId}`).reply(200, { data: { success: true } });
    mock.onGet(`/shops/${shopId}`).reply(200, { data: mockShop });

    await testBot.handleUpdate(callbackUpdate(`unsubscribe:${shopId}`));

    // ‚úÖ FIX: –î–∞—Ç—å –≤—Ä–µ–º—è –Ω–∞ async unsubscribe API call
    await new Promise(resolve => setImmediate(resolve));

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º answerCbQuery
    expect(testBot.captor.wasAnswerCbQueryCalled()).toBe(true);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –≤–µ—Ä–Ω—É–ª–∞—Å—å –∫ "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"
    const markup4 = testBot.getLastMarkup();
    const resubscribeBtn = findButton('üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', markup4);
    expect(resubscribeBtn).toBeTruthy();
    expect(resubscribeBtn.callback_data).toBe(`subscribe:${shopId}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ—Ç –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–ø–∏—Å–∞–Ω"
    const noSubscribedBtn = findButton('‚úÖ –ü–æ–¥–ø–∏—Å–∞–Ω', markup4);
    expect(noSubscribedBtn).toBeNull();
  });

  it('–Ω–µ–ª—å–∑—è –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–≤–æ–π –º–∞–≥–∞–∑–∏–Ω', async () => {
    // Mock subscribe API with error
    mock.onGet(`/subscriptions/check/${shopId}`).reply(200, {
      data: { subscribed: false }
    });
    mock.onPost(`/subscriptions`).reply(400, {
      error: 'Cannot subscribe to your own shop'
    });

    await testBot.handleUpdate(callbackUpdate(`subscribe:${shopId}`));

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–∫–∞–∑–∞–ª–∏ –æ—à–∏–±–∫—É
    const answers = testBot.captor.getAnswers();
    expect(answers.some(a => a.text === '‚ùå –ù–µ–ª—å–∑—è –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–≤–æ–π –º–∞–≥–∞–∑–∏–Ω')).toBe(true);
  });

  it('–æ—Ç–ø–∏—Å–∫–∞ –±–µ–∑ —Ç–æ–∫–µ–Ω–∞ ‚Üí –æ—à–∏–±–∫–∞', async () => {
    // Create new testBot without token
    const noTokenBot = createTestBot({
      skipAuth: true,
      mockSession: {
        token: null, // No token
        user: { id: 1, telegramId: '123456', selectedRole: 'buyer' }
      }
    });

    await noTokenBot.handleUpdate(callbackUpdate(`unsubscribe:${shopId}`));

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–∫–∞–∑–∞–ª–∏ –æ—à–∏–±–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const answers = noTokenBot.captor.getAnswers();
    expect(answers.some(a => a.text === '–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')).toBe(true);

    noTokenBot.reset();
  });
});
