/**
 * Manual DeepSeek AI Testing Script
 * 
 * –†–µ–∞–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã DeepSeek API –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö 9 –æ–ø–µ—Ä–∞—Ü–∏–π
 * 
 * Usage:
 *   node tests/manual/testDeepSeekAI.js
 */

import OpenAI from 'openai';
import dotenv from 'dotenv';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';
import { generateProductAIPrompt } from '../../src/utils/systemPrompts.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Load .env from bot root
dotenv.config({ path: join(__dirname, '../../.env') });

// Mock products –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const mockProducts = [
  { id: 1, name: 'iPhone 15 Pro', price: 999, currency: 'USD', stock_quantity: 10 },
  { id: 2, name: 'MacBook Pro', price: 2499, currency: 'USD', stock_quantity: 5 },
  { id: 3, name: 'AirPods Pro', price: 249, currency: 'USD', stock_quantity: 20 }
];

// Initialize DeepSeek client
const deepseek = new OpenAI({
  baseURL: 'https://api.deepseek.com',
  apiKey: process.env.DEEPSEEK_API_KEY
});

// Product tools definition (from productTools.js)
const tools = [
  {
    type: 'function',
    function: {
      name: 'addProduct',
      description: '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä –≤ –∫–∞—Ç–∞–ª–æ–≥',
      parameters: {
        type: 'object',
        properties: {
          name: { type: 'string', description: '–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞' },
          price: { type: 'number', description: '–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ)' },
          currency: { type: 'string', enum: ['USD', 'EUR', 'RUB'], description: '–í–∞–ª—é—Ç–∞' },
          description: { type: 'string', description: '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)' },
          stock_quantity: { type: 'integer', description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0)' }
        },
        required: ['name', 'price']
      }
    }
  },
  {
    type: 'function',
    function: {
      name: 'deleteProduct',
      description: '–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é',
      parameters: {
        type: 'object',
        properties: {
          productName: { type: 'string', description: '–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è' }
        },
        required: ['productName']
      }
    }
  },
  {
    type: 'function',
    function: {
      name: 'listProducts',
      description: '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ',
      parameters: { type: 'object', properties: {} }
    }
  },
  {
    type: 'function',
    function: {
      name: 'searchProduct',
      description: '–ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É (–Ω–∞–∑–≤–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ)',
      parameters: {
        type: 'object',
        properties: {
          query: { type: 'string', description: '–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å' }
        },
        required: ['query']
      }
    }
  },
  {
    type: 'function',
    function: {
      name: 'updateProduct',
      description: '–ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä: —Ü–µ–Ω—É, –Ω–∞–∑–≤–∞–Ω–∏–µ, –æ—Å—Ç–∞—Ç–æ–∫',
      parameters: {
        type: 'object',
        properties: {
          productName: { type: 'string', description: '–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è' },
          updates: {
            type: 'object',
            properties: {
              name: { type: 'string' },
              price: { type: 'number' },
              stock_quantity: { type: 'integer' }
            }
          }
        },
        required: ['productName', 'updates']
      }
    }
  },
  {
    type: 'function',
    function: {
      name: 'bulkDeleteAll',
      description: '–£–¥–∞–ª–∏—Ç—å –í–°–ï —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ (–æ—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é)',
      parameters: { type: 'object', properties: {} }
    }
  },
  {
    type: 'function',
    function: {
      name: 'bulkDeleteByNames',
      description: '–£–¥–∞–ª–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Å–ø–∏—Å–∫—É –Ω–∞–∑–≤–∞–Ω–∏–π',
      parameters: {
        type: 'object',
        properties: {
          productNames: {
            type: 'array',
            items: { type: 'string' },
            description: '–ú–∞—Å—Å–∏–≤ –Ω–∞–∑–≤–∞–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è'
          }
        },
        required: ['productNames']
      }
    }
  },
  {
    type: 'function',
    function: {
      name: 'recordSale',
      description: '–ó–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–¥–∞–∂—É —Ç–æ–≤–∞—Ä–∞ (—É–º–µ–Ω—å—à–∏—Ç—å –æ—Å—Ç–∞—Ç–æ–∫ –Ω–∞ —Å–∫–ª–∞–¥–µ)',
      parameters: {
        type: 'object',
        properties: {
          productName: { type: 'string', description: '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞' },
          quantity: { type: 'integer', description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1)' }
        },
        required: ['productName']
      }
    }
  },
  {
    type: 'function',
    function: {
      name: 'getProductInfo',
      description: '–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ (—Ü–µ–Ω–∞, –æ—Å—Ç–∞—Ç–æ–∫, –æ–ø–∏—Å–∞–Ω–∏–µ)',
      parameters: {
        type: 'object',
        properties: {
          productName: { type: 'string', description: '–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞' }
        },
        required: ['productName']
      }
    }
  }
];

// Create system prompt
function createSystemPrompt(products) {
  const productsList = products.length > 0
    ? products.map(p => `- ${p.name} | $${p.price} | ${p.stock_quantity} —à—Ç`).join('\n')
    : '(–ø—É—Å—Ç–æ)';

  return `–¢—ã ‚Äî AI –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏ –≤ Telegram-–º–∞–≥–∞–∑–∏–Ω–µ.

=== –¢–ï–ö–£–©–ò–ô –ö–ê–¢–ê–õ–û–ì (${products.length} —Ç–æ–≤–∞—Ä–æ–≤) ===
${productsList}

=== –¢–í–û–Ø –ó–ê–î–ê–ß–ê ===
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–∑—ã–≤–∞–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é.

=== –í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê ===
1. –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ –∫–∞—Ç–∞–ª–æ–≥–µ ‚Äî –ù–ï –≤—ã–∑—ã–≤–∞–π —Ñ—É–Ω–∫—Ü–∏—é, –≤–µ—Ä–Ω–∏—Å—å —Å —Ç–µ–∫—Å—Ç–æ–º "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"
2. –ü—Ä–∏ —á–∞—Å—Ç–∏—á–Ω–æ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä "–∞–π—Ñ–æ–Ω" –≤–º–µ—Å—Ç–æ "iPhone 15 Pro") ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π –¢–û–ß–ù–û–ï –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
3. –ï—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ —è–≤–Ω–æ ‚Äî –ù–ï –¥–æ–±–∞–≤–ª—è–π —Ç–æ–≤–∞—Ä, –ø–æ–ø—Ä–æ—Å–∏ —É–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—É
4. –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –í–°–ï —Ç–æ–≤–∞—Ä—ã ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π bulkDeleteAll (–Ω–µ deleteProduct –≤ —Ü–∏–∫–ª–µ!)
5. –í–∞–ª—é—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: USD

=== –ü–†–ò–ú–ï–†–´ ===
Input: "–¥–æ–±–∞–≤—å iPhone 15 –∑–∞ 999"
‚Üí addProduct(name="iPhone 15", price=999, currency="USD")

Input: "—É–¥–∞–ª–∏ –∞–π—Ñ–æ–Ω" (–≤ –∫–∞—Ç–∞–ª–æ–≥–µ "iPhone 15 Pro")
‚Üí deleteProduct(productName="iPhone 15 Pro")

Input: "–∫—É–ø–∏–ª–∏ 2 –º–∞–∫–±—É–∫–∞" (–≤ –∫–∞—Ç–∞–ª–æ–≥–µ "MacBook Pro")
‚Üí recordSale(productName="MacBook Pro", quantity=2)

Input: "–∫–∞–∫–∞—è —Ü–µ–Ω–∞ —É AirPods?"
‚Üí getProductInfo(productName="AirPods Pro")`;
}

// Test single command
async function testCommand(userMessage, products = mockProducts) {
  console.log(`\n${'='.repeat(60)}`);
  console.log(`üìù USER: "${userMessage}"`);
  console.log(`${'='.repeat(60)}`);

  // Use REAL production prompt from systemPrompts.js
  const systemPrompt = generateProductAIPrompt('Test Shop', products);

  try {
    const response = await deepseek.chat.completions.create({
      model: 'deepseek-chat',
      messages: [
        { role: 'system', content: systemPrompt },
        { role: 'user', content: userMessage }
      ],
      tools,
      tool_choice: 'auto',
      temperature: 0.7,  // Match production settings
      max_tokens: 500
    });

    const message = response.choices[0].message;

    if (message.tool_calls && message.tool_calls.length > 0) {
      console.log('‚úÖ AI RESPONSE: Function Call');
      message.tool_calls.forEach(call => {
        console.log(`   Function: ${call.function.name}`);
        console.log(`   Arguments: ${call.function.arguments}`);
        
        try {
          const args = JSON.parse(call.function.arguments);
          console.log(`   Parsed:`, JSON.stringify(args, null, 2));
        } catch (e) {
          console.log(`   ‚ö†Ô∏è Failed to parse arguments`);
        }
      });
    } else if (message.content) {
      console.log(`‚úÖ AI RESPONSE: Text`);
      console.log(`   "${message.content}"`);
    } else {
      console.log('‚ö†Ô∏è AI RESPONSE: Empty');
    }

    // Usage stats
    console.log(`\nüìä Tokens: ${response.usage.total_tokens} (prompt: ${response.usage.prompt_tokens}, completion: ${response.usage.completion_tokens})`);

    return response;
  } catch (error) {
    console.error('‚ùå ERROR:', error.message);
    if (error.response) {
      console.error('   Status:', error.response.status);
      console.error('   Data:', JSON.stringify(error.response.data, null, 2));
    }
    throw error;
  }
}

// Run all tests
async function runAllTests() {
  console.log('\nüöÄ DeepSeek AI Product Management - Manual Testing\n');
  console.log(`API Key: ${process.env.DEEPSEEK_API_KEY ? '‚úÖ Configured' : '‚ùå Missing'}`);
  console.log(`Model: deepseek-chat`);
  console.log(`\nMock Catalog: ${mockProducts.length} products\n`);

  const tests = [
    // 1. Add Product
    { command: '–¥–æ–±–∞–≤—å iPhone 15 –∑–∞ 999', category: 'ADD PRODUCT (Russian)' },
    { command: 'add MacBook for $1200', category: 'ADD PRODUCT (English)' },
    { command: '–¥–æ–±–∞–≤—å —Ç–æ–≤–∞—Ä –±–µ–∑ —Ü–µ–Ω—ã', category: 'ADD PRODUCT (Missing Price)' },

    // 2. Delete Product
    { command: '—É–¥–∞–ª–∏ iPhone 15 Pro', category: 'DELETE PRODUCT (Exact Match)' },
    { command: '—É–¥–∞–ª–∏ –∞–π—Ñ–æ–Ω –ø—Ä–æ', category: 'DELETE PRODUCT (Fuzzy Match)' },
    { command: '—É–¥–∞–ª–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–≤–∞—Ä', category: 'DELETE PRODUCT (Not Found)' },

    // 3. List Products
    { command: '–ø–æ–∫–∞–∂–∏ —Ç–æ–≤–∞—Ä—ã', category: 'LIST PRODUCTS (Russian)' },
    { command: 'list products', category: 'LIST PRODUCTS (English)' },
    { command: '–ø–æ–∫–∞–∂–∏ —Ç–æ–≤–∞—Ä—ã', category: 'LIST PRODUCTS (Empty)', products: [] },

    // 4. Search Product
    { command: '–Ω–∞–π–¥–∏ –º–∞–∫–±—É–∫', category: 'SEARCH PRODUCT (Found)' },
    { command: '–Ω–∞–π–¥–∏ samsung', category: 'SEARCH PRODUCT (Not Found)' },

    // 5. Update Product
    { command: '—Å–º–µ–Ω–∏ —Ü–µ–Ω—É iPhone –Ω–∞ 899', category: 'UPDATE PRODUCT (Price)' },
    { command: '–ø–µ—Ä–µ–∏–º–µ–Ω—É–π AirPods –≤ AirPods Max', category: 'UPDATE PRODUCT (Name)' },
    { command: '—É—Å—Ç–∞–Ω–æ–≤–∏ –æ—Å—Ç–∞—Ç–æ–∫ MacBook –≤ 15', category: 'UPDATE PRODUCT (Stock)' },

    // 6. Bulk Delete All
    { command: '—É–¥–∞–ª–∏ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã', category: 'BULK DELETE ALL' },
    { command: '–æ—á–∏—Å—Ç–∏ –∫–∞—Ç–∞–ª–æ–≥', category: 'BULK DELETE ALL (Alternative)' },

    // 7. Bulk Delete By Names
    { command: '—É–¥–∞–ª–∏ iPhone –∏ AirPods', category: 'BULK DELETE BY NAMES (2 items)' },
    { command: '—É–¥–∞–ª–∏ iPhone, MacBook –∏ AirPods', category: 'BULK DELETE BY NAMES (3 items)' },

    // 8. Record Sale
    { command: '–∫—É–ø–∏–ª–∏ iPhone', category: 'RECORD SALE (1 item)' },
    { command: '–∫—É–ø–∏–ª–∏ 3 AirPods', category: 'RECORD SALE (Multiple)' },
    { command: '–ø—Ä–æ–¥–∞–ª–∏ 2 –º–∞–∫–±—É–∫–∞', category: 'RECORD SALE (Russian)' },

    // 9. Get Product Info
    { command: '–∫–∞–∫–∞—è —Ü–µ–Ω–∞ —É iPhone?', category: 'GET PRODUCT INFO (Price)' },
    { command: '—Å–∫–æ–ª—å–∫–æ MacBook –æ—Å—Ç–∞–ª–æ—Å—å?', category: 'GET PRODUCT INFO (Stock)' },
    { command: '—Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ AirPods', category: 'GET PRODUCT INFO (Full Info)' },

    // Edge Cases
    { command: '–ø—Ä–∏–≤–µ—Ç', category: 'NOISE (Greeting)' },
    { command: '—Å–ø–∞—Å–∏–±–æ', category: 'NOISE (Thanks)' },
    { command: 'hello', category: 'NOISE (English Greeting)' }
  ];

  let successCount = 0;
  let failCount = 0;

  for (const test of tests) {
    try {
      await testCommand(test.command, test.products || mockProducts);
      successCount++;
      
      // Sleep 1s –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (rate limit)
      await new Promise(resolve => setTimeout(resolve, 1000));
    } catch (error) {
      failCount++;
      console.error(`\n‚ùå Test failed: ${test.category}`);
    }
  }

  console.log('\n' + '='.repeat(60));
  console.log('üìä FINAL RESULTS');
  console.log('='.repeat(60));
  console.log(`‚úÖ Successful: ${successCount}/${tests.length}`);
  console.log(`‚ùå Failed: ${failCount}/${tests.length}`);
  console.log(`Success Rate: ${((successCount / tests.length) * 100).toFixed(1)}%`);
}

// Run tests
if (!process.env.DEEPSEEK_API_KEY) {
  console.error('‚ùå DEEPSEEK_API_KEY not found in .env');
  process.exit(1);
}

runAllTests()
  .then(() => {
    console.log('\n‚úÖ All tests completed');
    process.exit(0);
  })
  .catch(error => {
    console.error('\n‚ùå Tests failed:', error.message);
    process.exit(1);
  });
