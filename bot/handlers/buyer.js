import {
  getShopByName,
  subscribeToShop,
  unsubscribeFromShop,
  getSubscriptions,
  getOrdersByBuyer
} from '../utils/api.js';
import {
  buyerMenuKeyboard,
  shopDetailKeyboard,
  subscriptionsListKeyboard,
  buyerOrdersMenuKeyboard,
  backToBuyerMenuKeyboard,
  searchResultKeyboard
} from '../keyboards/buyerMenu.js';

// Show buyer menu
export async function handleBuyerMenu(ctx) {
  try {
    await ctx.answerCbQuery();

    await ctx.editMessageText(
      `üõç –ú–µ–Ω—é –ø–æ–∫—É–ø–∞—Ç–µ–ª—è\n\n` +
      `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Status Stock!\n\n` +
      `–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n` +
      `‚Ä¢ –ù–∞—Ö–æ–¥–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã\n` +
      `‚Ä¢ –ü–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞ –ª—é–±–∏–º—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã\n` +
      `‚Ä¢ –î–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑—ã\n` +
      `‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É\n\n` +
      `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
      buyerMenuKeyboard()
    );
  } catch (error) {
    console.error('Error in handleBuyerMenu:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é –ø–æ–∫—É–ø–∞—Ç–µ–ª—è.');
  }
}

// Handle search shop
export async function handleSearchShop(ctx) {
  try {
    await ctx.answerCbQuery();

    ctx.session.state = 'awaiting_shop_search';

    await ctx.editMessageText(
      `üîç –ü–æ–∏—Å–∫ –º–∞–≥–∞–∑–∏–Ω–∞\n\n` +
      `–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –∏–ª–∏ –µ–≥–æ —á–∞—Å—Ç—å:\n\n` +
      `–ù–∞–ø—Ä–∏–º–µ—Ä: "sneakers", "fashion", "tech"`
    );
  } catch (error) {
    console.error('Error in handleSearchShop:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –º–∞–≥–∞–∑–∏–Ω–∞.');
  }
}

// Handle shop search input
export async function handleShopSearchInput(ctx) {
  try {
    if (ctx.session.state !== 'awaiting_shop_search') {
      return;
    }

    const searchQuery = ctx.message.text.trim();

    if (searchQuery.length < 2) {
      await ctx.reply('‚ùå –ó–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ú–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞.');
      return;
    }

    await ctx.reply('üîç –ò—â–µ–º –º–∞–≥–∞–∑–∏–Ω—ã...');

    // Search for shops
    const searchResult = await getShopByName(searchQuery);

    // Clear search state
    ctx.session.state = null;

    if (searchResult.success && searchResult.data) {
      const shops = Array.isArray(searchResult.data) ? searchResult.data : [searchResult.data];

      if (shops.length === 0) {
        await ctx.reply(
          `üòî –ú–∞–≥–∞–∑–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n\n` +
          `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.`,
          searchResultKeyboard([])
        );
      } else {
        await ctx.reply(
          `‚úÖ –ù–∞–π–¥–µ–Ω–æ –º–∞–≥–∞–∑–∏–Ω–æ–≤: ${shops.length}\n\n` +
          `–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:`,
          searchResultKeyboard(shops)
        );
      }
    } else {
      await ctx.reply(
        `üòî –ú–∞–≥–∞–∑–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n\n` +
        `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.`,
        searchResultKeyboard([])
      );
    }
  } catch (error) {
    console.error('Error in handleShopSearchInput:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –º–∞–≥–∞–∑–∏–Ω–æ–≤.');
  }
}

// Handle view shop
export async function handleViewShop(ctx, shopId) {
  try {
    await ctx.answerCbQuery();

    const telegramId = ctx.from.id;

    // Get shop details
    const shopResult = await getShopByName(''); // This should be replaced with getShopById

    // For now, we'll use a placeholder
    // TODO: Implement getShopById in api.js

    // Check if user is subscribed
    const subsResult = await getSubscriptions(telegramId);
    let isSubscribed = false;

    if (subsResult.success && subsResult.data) {
      isSubscribed = subsResult.data.some(sub => sub.shopId === shopId);
    }

    // Mock shop data for now
    const shop = {
      id: shopId,
      name: 'Shop Name',
      description: 'Shop description',
      productsCount: 0,
      subscribersCount: 0
    };

    await ctx.editMessageText(
      `üè™ ${shop.name}\n\n` +
      `üìù ${shop.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n\n` +
      `üì¶ –¢–æ–≤–∞—Ä–æ–≤: ${shop.productsCount || 0}\n` +
      `‚≠êÔ∏è –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: ${shop.subscribersCount || 0}\n\n` +
      `${isSubscribed ? '‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ—Ç –º–∞–≥–∞–∑–∏–Ω' : ''}`,
      shopDetailKeyboard(shopId, isSubscribed)
    );
  } catch (error) {
    console.error('Error in handleViewShop:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞–≥–∞–∑–∏–Ω–∞.');
  }
}

// Handle subscribe to shop
export async function handleSubscribe(ctx, shopId) {
  try {
    await ctx.answerCbQuery('‚è≥ –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è...');

    const telegramId = ctx.from.id;

    const result = await subscribeToShop(telegramId, shopId);

    if (result.success) {
      await ctx.answerCbQuery('‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –º–∞–≥–∞–∑–∏–Ω!');

      // Update the message to show subscribed state
      await handleViewShop(ctx, shopId);
    } else {
      await ctx.answerCbQuery(`‚ùå ${result.error}`);
    }
  } catch (error) {
    console.error('Error in handleSubscribe:', error);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ.');
  }
}

// Handle unsubscribe from shop
export async function handleUnsubscribe(ctx, shopId) {
  try {
    await ctx.answerCbQuery('‚è≥ –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è...');

    const telegramId = ctx.from.id;

    const result = await unsubscribeFromShop(telegramId, shopId);

    if (result.success) {
      await ctx.answerCbQuery('‚úÖ –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –º–∞–≥–∞–∑–∏–Ω–∞');

      // Update the message to show unsubscribed state
      await handleViewShop(ctx, shopId);
    } else {
      await ctx.answerCbQuery(`‚ùå ${result.error}`);
    }
  } catch (error) {
    console.error('Error in handleUnsubscribe:', error);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ.');
  }
}

// Handle my subscriptions
export async function handleMySubscriptions(ctx) {
  try {
    await ctx.answerCbQuery();

    const telegramId = ctx.from.id;

    await ctx.editMessageText('‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏...');

    const result = await getSubscriptions(telegramId);

    if (result.success && result.data) {
      const subscriptions = result.data;

      if (subscriptions.length === 0) {
        await ctx.editMessageText(
          `‚≠êÔ∏è –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏\n\n` +
          `–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫.\n\n` +
          `–ù–∞–π–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã –∏ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∏—Ö!`,
          subscriptionsListKeyboard([])
        );
      } else {
        await ctx.editMessageText(
          `‚≠êÔ∏è –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏ (${subscriptions.length})\n\n` +
          `–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω:`,
          subscriptionsListKeyboard(subscriptions)
        );
      }
    } else {
      await ctx.editMessageText(
        `‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫: ${result.error}`,
        backToBuyerMenuKeyboard()
      );
    }
  } catch (error) {
    console.error('Error in handleMySubscriptions:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫.');
  }
}

// Handle buyer orders
export async function handleBuyerOrders(ctx) {
  try {
    await ctx.answerCbQuery();

    await ctx.editMessageText(
      `üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã\n\n` +
      `–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤:`,
      buyerOrdersMenuKeyboard()
    );
  } catch (error) {
    console.error('Error in handleBuyerOrders:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤.');
  }
}

// Handle buyer orders by status
export async function handleBuyerOrdersByStatus(ctx, status) {
  try {
    await ctx.answerCbQuery();

    const telegramId = ctx.from.id;

    await ctx.editMessageText('‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–∫–∞–∑—ã...');

    const result = await getOrdersByBuyer(telegramId);

    if (result.success && result.data) {
      let orders = result.data;

      // Filter by status
      if (status === 'active') {
        orders = orders.filter(o => ['new', 'processing', 'shipped'].includes(o.status));
      } else {
        orders = orders.filter(o => o.status === status);
      }

      if (orders.length === 0) {
        const statusText = status === 'active' ? '–∞–∫—Ç–∏–≤–Ω—ã—Ö' :
                          status === 'completed' ? '–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö' :
                          '–æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö';

        await ctx.editMessageText(
          `üì¶ –ó–∞–∫–∞–∑—ã\n\n` +
          `–£ –≤–∞—Å –Ω–µ—Ç ${statusText} –∑–∞–∫–∞–∑–æ–≤.`,
          buyerOrdersMenuKeyboard()
        );
      } else {
        let ordersList = `üì¶ –ó–∞–∫–∞–∑—ã (${orders.length})\n\n`;

        orders.slice(0, 10).forEach((order, index) => {
          const statusEmoji = order.status === 'new' ? 'üÜï' :
                             order.status === 'processing' ? '‚è≥' :
                             order.status === 'shipped' ? 'üì¶' :
                             order.status === 'completed' ? '‚úÖ' : '‚ùå';

          ordersList += `${index + 1}. ${statusEmoji} –ó–∞–∫–∞–∑ #${order.id}\n`;
          ordersList += `   –ú–∞–≥–∞–∑–∏–Ω: ${order.shop?.name || 'N/A'}\n`;
          ordersList += `   –°—É–º–º–∞: $${order.total}\n\n`;
        });

        if (orders.length > 10) {
          ordersList += `\n... –∏ –µ—â–µ ${orders.length - 10} –∑–∞–∫–∞–∑–æ–≤\n`;
          ordersList += `\n–û—Ç–∫—Ä–æ–π—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤.`;
        }

        await ctx.editMessageText(ordersList, buyerOrdersMenuKeyboard());
      }
    } else {
      await ctx.editMessageText(
        `‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤: ${result.error}`,
        buyerOrdersMenuKeyboard()
      );
    }
  } catch (error) {
    console.error('Error in handleBuyerOrdersByStatus:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤.');
  }
}

// Handle open webapp for buyer
export async function handleOpenWebappBuyer(ctx) {
  try {
    await ctx.answerCbQuery();

    const webappUrl = process.env.WEBAPP_URL || 'https://your-webapp-url.com';

    await ctx.editMessageText(
      `üåê –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n\n` +
      `–û—Ç–∫—Ä–æ–π—Ç–µ –ø–æ–ª–Ω—É—é –≤–µ—Ä—Å–∏—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–ª—è:\n` +
      `‚Ä¢ –£–¥–æ–±–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤\n` +
      `‚Ä¢ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤\n` +
      `‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–º\n\n` +
      `üîó [–û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ](${webappUrl})`,
      {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üåê –û—Ç–∫—Ä—ã—Ç—å', url: webappUrl }],
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'buyer_menu' }],
          ],
        },
      }
    );
  } catch (error) {
    console.error('Error in handleOpenWebappBuyer:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.');
  }
}
