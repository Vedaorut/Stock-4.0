import {
  getShopByOwner,
  createShop,
  generateBitcoinAddress,
  verifyPayment
} from '../utils/api.js';
import {
  sellerMenuKeyboard,
  shopManagementKeyboard,
  paymentInstructionsKeyboard,
  verifyPaymentKeyboard,
  backToSellerMenuKeyboard
} from '../keyboards/sellerMenu.js';

// Show seller menu
export async function handleSellerMenu(ctx) {
  try {
    await ctx.answerCbQuery();

    const telegramId = ctx.from.id;

    // Check if seller has a shop
    const shopResult = await getShopByOwner(telegramId);

    if (shopResult.success && shopResult.data) {
      // Seller has a shop
      const shop = shopResult.data;
      ctx.session.shopId = shop.id;

      await ctx.editMessageText(
        `üíº –ú–µ–Ω—é –ø—Ä–æ–¥–∞–≤—Ü–∞\n\n` +
        `üè™ –í–∞—à –º–∞–≥–∞–∑–∏–Ω: ${shop.name}\n` +
        `üìä –°—Ç–∞—Ç—É—Å: ${shop.isActive ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚è∏ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n\n` +
        `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
        sellerMenuKeyboard()
      );
    } else {
      // Seller doesn't have a shop yet
      await ctx.editMessageText(
        `üíº –ú–µ–Ω—é –ø—Ä–æ–¥–∞–≤—Ü–∞\n\n` +
        `–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω–∞.\n\n` +
        `–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è:\n` +
        `üí∞ –û–ø–ª–∞—Ç–∞: $25 –≤ Bitcoin\n\n` +
        `–•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω?`,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚úÖ –°–æ–∑–¥–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω', callback_data: 'create_shop_start' }],
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }],
            ],
          },
        }
      );
    }
  } catch (error) {
    console.error('Error in handleSellerMenu:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é –ø—Ä–æ–¥–∞–≤—Ü–∞.');
  }
}

// Start shop creation process
export async function handleCreateShopStart(ctx) {
  try {
    await ctx.answerCbQuery();

    const telegramId = ctx.from.id;

    // Generate Bitcoin address for payment
    const addressResult = await generateBitcoinAddress(telegramId);

    if (addressResult.success) {
      const { address, amount } = addressResult.data;

      // Store payment info in session
      ctx.session.state = 'awaiting_payment';
      ctx.session.data = {
        bitcoinAddress: address,
        paymentAmount: amount,
      };

      await ctx.editMessageText(
        `üí≥ –û–ø–ª–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞\n\n` +
        `–°—Ç–æ–∏–º–æ—Å—Ç—å: $${amount}\n\n` +
        `üìç Bitcoin –∞–¥—Ä–µ—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n` +
        `\`${address}\`\n\n` +
        `‚ö†Ô∏è –í–∞–∂–Ω–æ:\n` +
        `1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å\n` +
        `2. –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏\n` +
        `3. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ "–Ø –æ–ø–ª–∞—Ç–∏–ª"\n\n` +
        `–í–∞—à –º–∞–≥–∞–∑–∏–Ω –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞.`,
        {
          parse_mode: 'Markdown',
          ...paymentInstructionsKeyboard()
        }
      );
    } else {
      await ctx.editMessageText(
        `‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Bitcoin –∞–¥—Ä–µ—Å–∞: ${addressResult.error}\n\n` +
        `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`,
        backToSellerMenuKeyboard()
      );
    }
  } catch (error) {
    console.error('Error in handleCreateShopStart:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞.');
  }
}

// Handle payment confirmation button
export async function handlePaymentConfirm(ctx) {
  try {
    await ctx.answerCbQuery();

    // Check if user is in payment state
    if (ctx.session.state !== 'awaiting_payment') {
      await ctx.reply('‚ùå –°–µ—Å—Å–∏—è –æ–ø–ª–∞—Ç—ã –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.');
      return;
    }

    ctx.session.state = 'awaiting_payment_hash';

    await ctx.editMessageText(
      `‚úÖ –û—Ç–ª–∏—á–Ω–æ!\n\n` +
      `–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ö—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (Transaction Hash) –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.\n\n` +
      `–•—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ –≤–∞—à–µ–º Bitcoin –∫–æ—à–µ–ª—å–∫–µ –∏–ª–∏ blockchain explorer.\n\n` +
      `–ü—Ä–∏–º–µ—Ä: \`a1b2c3d4e5f6...\``,
      {
        parse_mode: 'Markdown',
        ...verifyPaymentKeyboard()
      }
    );
  } catch (error) {
    console.error('Error in handlePaymentConfirm:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã.');
  }
}

// Handle payment hash input
export async function handlePaymentHashInput(ctx) {
  try {
    if (ctx.session.state !== 'awaiting_payment_hash') {
      return;
    }

    const paymentHash = ctx.message.text.trim();

    // Validate hash format (basic check)
    if (paymentHash.length < 10) {
      await ctx.reply(
        '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ö—ç—à–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.\n\n' +
        '–•—ç—à –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–ª–∏–Ω–Ω—ã–º –±—É–∫–≤–µ–Ω–Ω–æ-—Ü–∏—Ñ—Ä–æ–≤—ã–º –∫–æ–¥–æ–º.\n\n' +
        '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
      );
      return;
    }

    // Store hash in session
    ctx.session.data.paymentHash = paymentHash;

    await ctx.reply(
      `‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç–µ–∂...\n\n` +
      `–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.`
    );

    // Verify payment
    const verifyResult = await verifyPayment(paymentHash);

    if (verifyResult.success && verifyResult.data.verified) {
      // Payment verified, ask for shop name
      ctx.session.state = 'awaiting_shop_name';

      await ctx.reply(
        `‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n\n` +
        `–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞:\n\n` +
        `‚ö†Ô∏è –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n` +
        `‚Ä¢ –ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞\n` +
        `‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤\n` +
        `‚Ä¢ –¢–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã`
      );
    } else {
      await ctx.reply(
        `‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.\n\n` +
        `–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n` +
        `‚Ä¢ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –µ—â–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –≤ —Å–µ—Ç–∏\n` +
        `‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π —Ö—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏\n` +
        `‚Ä¢ –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞\n\n` +
        `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.`,
        verifyPaymentKeyboard()
      );
    }
  } catch (error) {
    console.error('Error in handlePaymentHashInput:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞.');
  }
}

// Handle shop name input
export async function handleShopNameInput(ctx) {
  try {
    if (ctx.session.state !== 'awaiting_shop_name') {
      return;
    }

    const shopName = ctx.message.text.trim();

    // Validate shop name
    if (shopName.length < 3) {
      await ctx.reply('‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞.');
      return;
    }

    if (shopName.length > 50) {
      await ctx.reply('‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤.');
      return;
    }

    // Check for valid characters
    const validName = /^[a-zA-Z–∞-—è–ê-–Ø0-9\s]+$/.test(shopName);
    if (!validName) {
      await ctx.reply('‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø—Ä–æ–±–µ–ª—ã.');
      return;
    }

    await ctx.reply('‚è≥ –°–æ–∑–¥–∞–µ–º –≤–∞—à –º–∞–≥–∞–∑–∏–Ω...');

    // Create shop
    const telegramId = ctx.from.id;
    const paymentHash = ctx.session.data.paymentHash;

    const shopResult = await createShop(telegramId, shopName, paymentHash);

    if (shopResult.success) {
      const shop = shopResult.data;

      // Clear session state
      ctx.session.state = null;
      ctx.session.data = {};
      ctx.session.shopId = shop.id;

      await ctx.reply(
        `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à –º–∞–≥–∞–∑–∏–Ω —Å–æ–∑–¥–∞–Ω!\n\n` +
        `üè™ –ù–∞–∑–≤–∞–Ω–∏–µ: ${shop.name}\n` +
        `üìä –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω\n\n` +
        `–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n` +
        `‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å —Ç–æ–≤–∞—Ä—ã\n` +
        `‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å –∑–∞–∫–∞–∑—ã\n` +
        `‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å –º–∞–≥–∞–∑–∏–Ω–æ–º\n\n` +
        `–ù–∞—á–Ω–∏—Ç–µ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞!`,
        sellerMenuKeyboard()
      );
    } else {
      await ctx.reply(
        `‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞: ${shopResult.error}\n\n` +
        `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.`,
        backToSellerMenuKeyboard()
      );
    }
  } catch (error) {
    console.error('Error in handleShopNameInput:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞.');
  }
}

// Cancel shop creation
export async function handleCancelShopCreation(ctx) {
  try {
    await ctx.answerCbQuery();

    // Clear session
    ctx.session.state = null;
    ctx.session.data = {};

    await ctx.editMessageText(
      '‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\n' +
      '–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω –ø–æ–∑–∂–µ.',
      backToSellerMenuKeyboard()
    );
  } catch (error) {
    console.error('Error in handleCancelShopCreation:', error);
    await ctx.reply('–°–æ–∑–¥–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
  }
}

// Show my shop
export async function handleMyShop(ctx) {
  try {
    await ctx.answerCbQuery();

    const telegramId = ctx.from.id;
    const shopResult = await getShopByOwner(telegramId);

    if (shopResult.success && shopResult.data) {
      const shop = shopResult.data;

      await ctx.editMessageText(
        `üè™ –ú–æ–π –º–∞–≥–∞–∑–∏–Ω\n\n` +
        `üìõ –ù–∞–∑–≤–∞–Ω–∏–µ: ${shop.name}\n` +
        `üìä –°—Ç–∞—Ç—É—Å: ${shop.isActive ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚è∏ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n` +
        `üì¶ –¢–æ–≤–∞—Ä–æ–≤: ${shop.productsCount || 0}\n` +
        `üõç –ó–∞–∫–∞–∑–æ–≤: ${shop.ordersCount || 0}\n` +
        `‚≠êÔ∏è –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: ${shop.subscribersCount || 0}\n\n` +
        `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
        shopManagementKeyboard(shop.id)
      );
    } else {
      await ctx.editMessageText(
        '‚ùå –ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.',
        backToSellerMenuKeyboard()
      );
    }
  } catch (error) {
    console.error('Error in handleMyShop:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞–≥–∞–∑–∏–Ω–∞.');
  }
}

// Handle verify payment button
export async function handleVerifyPaymentButton(ctx) {
  try {
    await ctx.answerCbQuery('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ö—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —á–∞—Ç');
  } catch (error) {
    console.error('Error in handleVerifyPaymentButton:', error);
  }
}
