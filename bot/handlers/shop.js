import {
  getProducts,
  createProduct,
  updateProduct,
  deleteProduct,
  getOrdersByShop,
  updateOrderStatus
} from '../utils/api.js';
import {
  productListKeyboard,
  productDetailKeyboard,
  editProductKeyboard,
  ordersMenuKeyboard,
  orderDetailKeyboard,
  backToSellerMenuKeyboard
} from '../keyboards/sellerMenu.js';

// Handle add product
export async function handleAddProduct(ctx) {
  try {
    await ctx.answerCbQuery();

    // Check if seller has a shop
    if (!ctx.session.shopId) {
      await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω–∞. –°–æ–∑–¥–∞–π—Ç–µ –º–∞–≥–∞–∑–∏–Ω —Å–Ω–∞—á–∞–ª–∞.');
      return;
    }

    ctx.session.state = 'adding_product_name';
    ctx.session.data = {
      shopId: ctx.session.shopId,
      product: {}
    };

    await ctx.editMessageText(
      `‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞\n\n` +
      `–®–∞–≥ 1/5: –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞\n\n` +
      `–ù–∞–ø—Ä–∏–º–µ—Ä: "Nike Air Max 90" –∏–ª–∏ "iPhone 15 Pro"`
    );
  } catch (error) {
    console.error('Error in handleAddProduct:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞.');
  }
}

// Handle product name input
export async function handleProductNameInput(ctx) {
  try {
    if (ctx.session.state !== 'adding_product_name') {
      return;
    }

    const productName = ctx.message.text.trim();

    if (productName.length < 3) {
      await ctx.reply('‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞.');
      return;
    }

    if (productName.length > 100) {
      await ctx.reply('‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.');
      return;
    }

    ctx.session.data.product.name = productName;
    ctx.session.state = 'adding_product_description';

    await ctx.reply(
      `‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: ${productName}\n\n` +
      `–®–∞–≥ 2/5: –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞\n\n` +
      `–û–ø–∏—à–∏—Ç–µ —Ç–æ–≤–∞—Ä –ø–æ–¥—Ä–æ–±–Ω–æ. –£–∫–∞–∂–∏—Ç–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, —Å–æ—Å—Ç–æ—è–Ω–∏–µ.`
    );
  } catch (error) {
    console.error('Error in handleProductNameInput:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –Ω–∞–∑–≤–∞–Ω–∏—è.');
  }
}

// Handle product description input
export async function handleProductDescriptionInput(ctx) {
  try {
    if (ctx.session.state !== 'adding_product_description') {
      return;
    }

    const description = ctx.message.text.trim();

    if (description.length < 10) {
      await ctx.reply('‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤.');
      return;
    }

    if (description.length > 1000) {
      await ctx.reply('‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤.');
      return;
    }

    ctx.session.data.product.description = description;
    ctx.session.state = 'adding_product_price';

    await ctx.reply(
      `‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ\n\n` +
      `–®–∞–≥ 3/5: –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö\n\n` +
      `–ù–∞–ø—Ä–∏–º–µ—Ä: 150 –∏–ª–∏ 1499.99`
    );
  } catch (error) {
    console.error('Error in handleProductDescriptionInput:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –æ–ø–∏—Å–∞–Ω–∏—è.');
  }
}

// Handle product price input
export async function handleProductPriceInput(ctx) {
  try {
    if (ctx.session.state !== 'adding_product_price') {
      return;
    }

    const priceText = ctx.message.text.trim();
    const price = parseFloat(priceText);

    if (isNaN(price) || price <= 0) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0.');
      return;
    }

    if (price > 1000000) {
      await ctx.reply('‚ùå –¶–µ–Ω–∞ —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞—è. –ú–∞–∫—Å–∏–º—É–º $1,000,000.');
      return;
    }

    ctx.session.data.product.price = price;
    ctx.session.state = 'adding_product_stock';

    await ctx.reply(
      `‚úÖ –¶–µ–Ω–∞: $${price.toFixed(2)}\n\n` +
      `–®–∞–≥ 4/5: –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –Ω–∞–ª–∏—á–∏–∏\n\n` +
      `–ù–∞–ø—Ä–∏–º–µ—Ä: 10 –∏–ª–∏ 1`
    );
  } catch (error) {
    console.error('Error in handleProductPriceInput:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ —Ü–µ–Ω—ã.');
  }
}

// Handle product stock input
export async function handleProductStockInput(ctx) {
  try {
    if (ctx.session.state !== 'adding_product_stock') {
      return;
    }

    const stockText = ctx.message.text.trim();
    const stock = parseInt(stockText);

    if (isNaN(stock) || stock < 0) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ–µ 0.');
      return;
    }

    if (stock > 10000) {
      await ctx.reply('‚ùå –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –ú–∞–∫—Å–∏–º—É–º 10,000.');
      return;
    }

    ctx.session.data.product.stock = stock;
    ctx.session.state = 'adding_product_image';

    await ctx.reply(
      `‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${stock}\n\n` +
      `–®–∞–≥ 5/5: –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞\n\n` +
      `–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å" –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –ø–æ–∑–∂–µ.`
    );
  } catch (error) {
    console.error('Error in handleProductStockInput:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞.');
  }
}

// Handle product image input
export async function handleProductImageInput(ctx) {
  try {
    if (ctx.session.state !== 'adding_product_image') {
      return;
    }

    let imageUrl = null;

    // Check if user sent a photo
    if (ctx.message.photo && ctx.message.photo.length > 0) {
      // Get the largest photo
      const photo = ctx.message.photo[ctx.message.photo.length - 1];
      imageUrl = photo.file_id; // Store file_id for now
      // In production, you should upload this to your storage and get URL
    } else if (ctx.message.text && ctx.message.text.toLowerCase() === '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å') {
      imageUrl = null;
    } else {
      await ctx.reply(
        '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å".'
      );
      return;
    }

    ctx.session.data.product.imageUrl = imageUrl;

    await ctx.reply('‚è≥ –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä...');

    // Create product
    const productData = {
      name: ctx.session.data.product.name,
      description: ctx.session.data.product.description,
      price: ctx.session.data.product.price,
      stock: ctx.session.data.product.stock,
      imageUrl: ctx.session.data.product.imageUrl,
    };

    const result = await createProduct(ctx.session.data.shopId, productData);

    if (result.success) {
      const product = result.data;

      // Clear session
      ctx.session.state = null;
      ctx.session.data = {};

      await ctx.reply(
        `‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n` +
        `üì¶ ${product.name}\n` +
        `üí∞ –¶–µ–Ω–∞: $${product.price}\n` +
        `üìä –í –Ω–∞–ª–∏—á–∏–∏: ${product.stock}\n\n` +
        `–¢–æ–≤–∞—Ä —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π!`,
        backToSellerMenuKeyboard()
      );
    } else {
      await ctx.reply(
        `‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: ${result.error}\n\n` +
        `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.`,
        backToSellerMenuKeyboard()
      );
    }
  } catch (error) {
    console.error('Error in handleProductImageInput:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.');
  }
}

// Handle view products list
export async function handleViewProducts(ctx, shopId) {
  try {
    await ctx.answerCbQuery();

    await ctx.editMessageText('‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã...');

    const result = await getProducts(shopId);

    if (result.success && result.data) {
      const products = result.data;

      if (products.length === 0) {
        await ctx.editMessageText(
          `üì¶ –¢–æ–≤–∞—Ä—ã –º–∞–≥–∞–∑–∏–Ω–∞\n\n` +
          `–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.\n\n` +
          `–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä!`,
          productListKeyboard([])
        );
      } else {
        await ctx.editMessageText(
          `üì¶ –¢–æ–≤–∞—Ä—ã –º–∞–≥–∞–∑–∏–Ω–∞ (${products.length})\n\n` +
          `–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:`,
          productListKeyboard(products)
        );
      }
    } else {
      await ctx.editMessageText(
        `‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤: ${result.error}`,
        backToSellerMenuKeyboard()
      );
    }
  } catch (error) {
    console.error('Error in handleViewProducts:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–æ–≤.');
  }
}

// Handle view product detail
export async function handleViewProductDetail(ctx, productId) {
  try {
    await ctx.answerCbQuery();

    // Get product from session or fetch from API
    // For now, using mock data
    const product = {
      id: productId,
      name: 'Product Name',
      description: 'Product description',
      price: 100,
      stock: 10,
      imageUrl: null
    };

    let message = `üì¶ ${product.name}\n\n`;
    message += `üìù ${product.description}\n\n`;
    message += `üí∞ –¶–µ–Ω–∞: $${product.price}\n`;
    message += `üìä –í –Ω–∞–ª–∏—á–∏–∏: ${product.stock}\n`;

    await ctx.editMessageText(message, productDetailKeyboard(productId));
  } catch (error) {
    console.error('Error in handleViewProductDetail:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–∞.');
  }
}

// Handle delete product
export async function handleDeleteProduct(ctx, productId) {
  try {
    await ctx.answerCbQuery('‚è≥ –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä...');

    const result = await deleteProduct(productId);

    if (result.success) {
      await ctx.answerCbQuery('‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω');

      await ctx.editMessageText(
        `‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!\n\n` +
        `–¢–æ–≤–∞—Ä –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π.`,
        backToSellerMenuKeyboard()
      );
    } else {
      await ctx.answerCbQuery(`‚ùå ${result.error}`);
    }
  } catch (error) {
    console.error('Error in handleDeleteProduct:', error);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞.');
  }
}

// Handle my orders
export async function handleMyOrders(ctx) {
  try {
    await ctx.answerCbQuery();

    await ctx.editMessageText(
      `üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã\n\n` +
      `–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤:`,
      ordersMenuKeyboard()
    );
  } catch (error) {
    console.error('Error in handleMyOrders:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤.');
  }
}

// Handle orders by status
export async function handleOrdersByStatus(ctx, status) {
  try {
    await ctx.answerCbQuery();

    if (!ctx.session.shopId) {
      await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω–∞.');
      return;
    }

    await ctx.editMessageText('‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–∫–∞–∑—ã...');

    const result = await getOrdersByShop(ctx.session.shopId);

    if (result.success && result.data) {
      let orders = result.data;

      // Filter by status
      orders = orders.filter(o => o.status === status);

      if (orders.length === 0) {
        const statusText = status === 'new' ? '–Ω–æ–≤—ã—Ö' :
                          status === 'processing' ? '–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ' :
                          status === 'completed' ? '–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö' :
                          '–æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö';

        await ctx.editMessageText(
          `üì¶ –ó–∞–∫–∞–∑—ã\n\n` +
          `–£ –≤–∞—Å –Ω–µ—Ç ${statusText} –∑–∞–∫–∞–∑–æ–≤.`,
          ordersMenuKeyboard()
        );
      } else {
        let ordersList = `üì¶ –ó–∞–∫–∞–∑—ã (${orders.length})\n\n`;

        orders.slice(0, 10).forEach((order, index) => {
          const statusEmoji = order.status === 'new' ? 'üÜï' :
                             order.status === 'processing' ? '‚è≥' :
                             order.status === 'shipped' ? 'üì¶' :
                             order.status === 'completed' ? '‚úÖ' : '‚ùå';

          ordersList += `${index + 1}. ${statusEmoji} –ó–∞–∫–∞–∑ #${order.id}\n`;
          ordersList += `   –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: ${order.buyer?.username || 'N/A'}\n`;
          ordersList += `   –°—É–º–º–∞: $${order.total}\n\n`;
        });

        if (orders.length > 10) {
          ordersList += `\n... –∏ –µ—â–µ ${orders.length - 10} –∑–∞–∫–∞–∑–æ–≤\n`;
          ordersList += `\n–û—Ç–∫—Ä–æ–π—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤.`;
        }

        await ctx.editMessageText(ordersList, ordersMenuKeyboard());
      }
    } else {
      await ctx.editMessageText(
        `‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤: ${result.error}`,
        ordersMenuKeyboard()
      );
    }
  } catch (error) {
    console.error('Error in handleOrdersByStatus:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤.');
  }
}

// Handle update order status
export async function handleUpdateOrderStatus(ctx, orderId, newStatus) {
  try {
    await ctx.answerCbQuery('‚è≥ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å...');

    const result = await updateOrderStatus(orderId, newStatus);

    if (result.success) {
      await ctx.answerCbQuery('‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω');

      const statusText = newStatus === 'processing' ? '–ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É' :
                        newStatus === 'shipped' ? '–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω' :
                        newStatus === 'completed' ? '–∑–∞–≤–µ—Ä—à–µ–Ω' :
                        newStatus === 'rejected' ? '–æ—Ç–∫–ª–æ–Ω–µ–Ω' : '–æ–±–Ω–æ–≤–ª–µ–Ω';

      await ctx.editMessageText(
        `‚úÖ –ó–∞–∫–∞–∑ #${orderId} ${statusText}\n\n` +
        `–ü–æ–∫—É–ø–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.`,
        backToSellerMenuKeyboard()
      );

      // TODO: Send notification to buyer
    } else {
      await ctx.answerCbQuery(`‚ùå ${result.error}`);
    }
  } catch (error) {
    console.error('Error in handleUpdateOrderStatus:', error);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.');
  }
}

// Handle open webapp for seller
export async function handleOpenWebappSeller(ctx) {
  try {
    await ctx.answerCbQuery();

    const webappUrl = process.env.WEBAPP_URL || 'https://your-webapp-url.com';

    await ctx.editMessageText(
      `üåê –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n\n` +
      `–û—Ç–∫—Ä–æ–π—Ç–µ –ø–æ–ª–Ω—É—é –≤–µ—Ä—Å–∏—é –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è:\n` +
      `‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏\n` +
      `‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø—Ä–æ–¥–∞–∂\n` +
      `‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏\n` +
      `‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞\n\n` +
      `üîó [–û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ](${webappUrl}/seller)`,
      {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üåê –û—Ç–∫—Ä—ã—Ç—å', url: `${webappUrl}/seller` }],
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'seller_menu' }],
          ],
        },
      }
    );
  } catch (error) {
    console.error('Error in handleOpenWebappSeller:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.');
  }
}
