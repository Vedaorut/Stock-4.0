/**
 * Pay Subscription Scene
 * 
 * Multi-step wizard for paying monthly shop subscription
 * 
 * Steps:
 * 1. Show pricing and select tier (free $25 or pro $35)
 * 2. Select cryptocurrency
 * 3. Show payment address and amount
 * 4. User sends tx_hash
 * 5. Verify payment and activate subscription
 */

import { Scenes, Markup } from 'telegraf';
import api from '../utils/api.js';
import logger from '../utils/logger.js';
import * as messageCleanup from '../utils/messageCleanup.js';
import * as smartMessage from '../utils/smartMessage.js';

// Crypto payment addresses (should match backend)
const PAYMENT_ADDRESSES = {
  BTC: process.env.BTC_PAYMENT_ADDRESS || '1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa',
  ETH: process.env.ETH_PAYMENT_ADDRESS || '0x742d35Cc6634C0532925a3b844Bc9e7595f0bEb',
  USDT: process.env.USDT_PAYMENT_ADDRESS || '0x742d35Cc6634C0532925a3b844Bc9e7595f0bEb',
  TON: process.env.TON_PAYMENT_ADDRESS || 'EQD...'
};

const paySubscriptionScene = new Scenes.WizardScene(
  'pay_subscription',
  
  // Step 1: Show pricing and tier selection
  async (ctx) => {
    try {
      const shopId = ctx.session.shopId;

      if (!shopId) {
        await smartMessage.send(ctx, { text: '‚ùå –ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –º–∞–≥–∞–∑–∏–Ω —Å–Ω–∞—á–∞–ª–∞.' });
        return ctx.scene.leave();
      }

      // Get current subscription status
      const token = ctx.session.token;
      const statusResponse = await api.get(`/subscriptions/status/${shopId}`, {
        headers: { Authorization: `Bearer ${token}` }
      });

      const { subscription, shop } = statusResponse.data;

      let message = `üí≥ <b>–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞</b>\n\n`;
      message += `üè™ –ú–∞–≥–∞–∑–∏–Ω: ${shop.name}\n\n`;

      // Show current status
      if (subscription) {
        message += `üìä <b>–¢–µ–∫—É—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞:</b>\n`;
        message += `‚Ä¢ –¢–∞—Ä–∏—Ñ: ${subscription.tier === 'pro' ? 'PRO üíé' : 'FREE'}\n`;
        message += `‚Ä¢ –°—Ç–∞—Ç—É—Å: ${subscription.status}\n`;
        message += `‚Ä¢ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ${new Date(subscription.periodEnd).toLocaleDateString('ru-RU')}\n\n`;
      } else {
        message += `‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏\n\n`;
      }

      // Show pricing
      message += `üí∞ <b>–¢–∞—Ä–∏—Ñ—ã (–µ–∂–µ–º–µ—Å—è—á–Ω–æ):</b>\n\n`;
      message += `<b>FREE</b> - $25/–º–µ—Å—è—Ü\n`;
      message += `‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã\n`;
      message += `‚Ä¢ –ë–∞–∑–æ–≤–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n`;
      message += `‚Ä¢ –ó–∞–∫–∞–∑—ã –∏ –ø–ª–∞—Ç–µ–∂–∏\n\n`;
      
      message += `<b>PRO üíé</b> - $35/–º–µ—Å—è—Ü\n`;
      message += `‚Ä¢ –í—Å—ë –∏–∑ FREE\n`;
      message += `‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏\n`;
      message += `‚Ä¢ –†–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –∫–∞–Ω–∞–ª–∞ (2/–º–µ—Å)\n`;
      message += `‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n`;
      
      message += `–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –æ–ø–ª–∞—Ç—ã:`;

      await ctx.replyWithHTML(
        message,
        Markup.inlineKeyboard([
          [Markup.button.callback('FREE - $25', 'subscription:tier:free')],
          [Markup.button.callback('PRO üíé - $35', 'subscription:tier:pro')],
          [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'seller:main')]
        ])
      );

      // Save shop info for next steps
      ctx.wizard.state.shopId = shopId;
      ctx.wizard.state.shopName = shop.name;

      return ctx.wizard.next();
    } catch (error) {
      logger.error('[PaySubscription] Step 1 error:', error);
      
      const errorMsg = error.response?.data?.error || error.message;
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${errorMsg}`, Markup.inlineKeyboard([
        [Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'seller:main')]
      ]));
      
      return ctx.scene.leave();
    }
  },

  // Step 2: Handle tier selection and show crypto options
  async (ctx) => {
    if (!ctx.callbackQuery) {
      return;
    }

    const data = ctx.callbackQuery.data;

    // Handle cancel
    if (data === 'seller:main') {
      await ctx.answerCbQuery('–û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞');
      return ctx.scene.leave();
    }

    // Parse tier selection
    if (!data.startsWith('subscription:tier:')) {
      await ctx.answerCbQuery('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä');
      return;
    }

    const tier = data.replace('subscription:tier:', '');
    if (tier !== 'free' && tier !== 'pro') {
      await ctx.answerCbQuery('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∞—Ä–∏—Ñ');
      return;
    }

    await ctx.answerCbQuery();

    const amount = tier === 'pro' ? 35 : 25;
    ctx.wizard.state.tier = tier;
    ctx.wizard.state.amount = amount;

    let message = `üíé <b>–í—ã–±—Ä–∞–Ω —Ç–∞—Ä–∏—Ñ: ${tier.toUpperCase()}</b>\n\n`;
    message += `üíµ –°—É–º–º–∞: $${amount}\n\n`;
    message += `–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –æ–ø–ª–∞—Ç—ã:`;

    await ctx.editMessageText(
      message,
      {
        parse_mode: 'HTML',
        ...Markup.inlineKeyboard([
          [Markup.button.callback('‚Çø Bitcoin (BTC)', 'subscription:crypto:BTC')],
          [Markup.button.callback('Œû Ethereum (ETH)', 'subscription:crypto:ETH')],
          [Markup.button.callback('üíµ USDT (ERC-20)', 'subscription:crypto:USDT')],
          [Markup.button.callback('üíé TON', 'subscription:crypto:TON')],
          [Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'subscription:back')]
        ])
      }
    );

    return ctx.wizard.next();
  },

  // Step 3: Handle crypto selection and show payment address
  async (ctx) => {
    if (!ctx.callbackQuery) {
      return;
    }

    const data = ctx.callbackQuery.data;

    // Handle back
    if (data === 'subscription:back') {
      await ctx.answerCbQuery();
      return ctx.wizard.back();
    }

    // Handle cancel
    if (data === 'seller:main') {
      await ctx.answerCbQuery('–û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞');
      return ctx.scene.leave();
    }

    // Parse crypto selection
    if (!data.startsWith('subscription:crypto:')) {
      await ctx.answerCbQuery('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä');
      return;
    }

    const currency = data.replace('subscription:crypto:', '');
    if (!['BTC', 'ETH', 'USDT', 'TON'].includes(currency)) {
      await ctx.answerCbQuery('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞');
      return;
    }

    await ctx.answerCbQuery();

    const { tier, amount } = ctx.wizard.state;
    const paymentAddress = PAYMENT_ADDRESSES[currency];

    ctx.wizard.state.currency = currency;
    ctx.wizard.state.paymentAddress = paymentAddress;

    let message = `üí≥ <b>–î–µ—Ç–∞–ª–∏ –æ–ø–ª–∞—Ç—ã</b>\n\n`;
    message += `üíé –¢–∞—Ä–∏—Ñ: ${tier.toUpperCase()}\n`;
    message += `üíµ –°—É–º–º–∞: $${amount}\n`;
    message += `ü™ô –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞: ${currency}\n\n`;
    message += `üì¨ <b>–ê–¥—Ä–µ—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b>\n`;
    message += `<code>${paymentAddress}</code>\n\n`;
    message += `‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b>\n`;
    message += `1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É –≤ ${currency}\n`;
    message += `2. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ Transaction Hash (TX Hash)\n`;
    message += `3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º\n\n`;
    message += `üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ TX Hash –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:`;

    await ctx.editMessageText(
      message,
      {
        parse_mode: 'HTML',
        ...Markup.inlineKeyboard([
          [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'seller:main')]
        ])
      }
    );

    return ctx.wizard.next();
  },

  // Step 4: Handle tx_hash and verify payment
  async (ctx) => {
    // Handle cancel button
    if (ctx.callbackQuery?.data === 'seller:main') {
      await ctx.answerCbQuery('–û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞');
      return ctx.scene.leave();
    }

    // Wait for text message with tx_hash
    if (!ctx.message?.text) {
      await smartMessage.send(ctx, { text: '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ Transaction Hash —Ç–µ–∫—Å—Ç–æ–º.' });
      return;
    }

    const txHash = ctx.message.text.trim();

    // Basic validation
    if (txHash.length < 10) {
      await smartMessage.send(ctx, { text: '‚ùå TX Hash —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–Ω–æ–≤–∞.' });
      return;
    }

    try {
      const loadingMsg = await smartMessage.send(ctx, { text: '‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é...\n\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 30 —Å–µ–∫—É–Ω–¥.' });

      const { shopId, tier, currency, paymentAddress } = ctx.wizard.state;
      const token = ctx.session.token;

      // Verify payment via backend
      const paymentResponse = await api.post(
        '/subscriptions/pay',
        {
          shopId,
          tier,
          txHash,
          currency,
          paymentAddress
        },
        {
          headers: { Authorization: `Bearer ${token}` }
        }
      );

      const { subscription, message } = paymentResponse.data;

      // Delete loading message
      await ctx.telegram.deleteMessage(ctx.chat.id, loadingMsg.message_id).catch(() => {});

      // Show success
      let successMessage = `‚úÖ <b>–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>\n\n`;
      successMessage += `üíé –¢–∞—Ä–∏—Ñ: ${tier.toUpperCase()}\n`;
      successMessage += `üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ${new Date(subscription.periodEnd).toLocaleDateString('ru-RU')}\n`;
      successMessage += `üÜî ID –ø–æ–¥–ø–∏—Å–∫–∏: ${subscription.id}\n\n`;
      
      if (tier === 'pro') {
        successMessage += `üéâ <b>PRO —Ñ—É–Ω–∫—Ü–∏–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã:</b>\n`;
        successMessage += `‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏\n`;
        successMessage += `‚Ä¢ –†–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –∫–∞–Ω–∞–ª–∞ (2/–º–µ—Å)\n`;
        successMessage += `‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n`;
      }
      
      successMessage += `–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –í–∞—à –º–∞–≥–∞–∑–∏–Ω –∞–∫—Ç–∏–≤–µ–Ω.`;

      await ctx.replyWithHTML(
        successMessage,
        Markup.inlineKeyboard([
          [Markup.button.callback('‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'seller:main')]
        ])
      );

      logger.info(`[PaySubscription] Payment successful: shop ${shopId}, tier ${tier}, tx ${txHash}`);

      return ctx.scene.leave();
    } catch (error) {
      logger.error('[PaySubscription] Payment verification error:', error);
      
      let errorMessage = '‚ùå <b>–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏</b>\n\n';
      
      const errorData = error.response?.data;
      if (errorData?.error === 'DUPLICATE_TX_HASH') {
        errorMessage += '‚ö†Ô∏è –≠—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–∂–µ –±—ã–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞.\n\n';
        errorMessage += '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π TX Hash –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂.';
      } else if (errorData?.error === 'PAYMENT_VERIFICATION_FAILED') {
        errorMessage += '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–ª–∞—Ç—ë–∂.\n\n';
        errorMessage += '–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n';
        errorMessage += '‚Ä¢ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –µ—â—ë –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –≤ –±–ª–æ–∫—á–µ–π–Ω–µ\n';
        errorMessage += '‚Ä¢ –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –∏–ª–∏ –∞–¥—Ä–µ—Å\n';
        errorMessage += '‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π TX Hash\n\n';
        errorMessage += '–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
      } else {
        errorMessage += errorData?.message || error.message;
      }

      await ctx.replyWithHTML(
        errorMessage,
        Markup.inlineKeyboard([
          [Markup.button.callback('üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', 'subscription:retry')],
          [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'seller:main')]
        ])
      );

      return; // Stay in this step for retry
    }
  }
);

// Leave handler
paySubscriptionScene.leave(async (ctx) => {
  // Cleanup wizard messages (keep final message)
  await messageCleanup.cleanupWizard(ctx, {
    keepFinalMessage: true,
    keepWelcome: true
  });

  ctx.wizard.state = {};
  logger.info('[PaySubscription] Scene left');
});

export default paySubscriptionScene;
