/**
 * Channel Migration Wizard Scene
 * 
 * Multi-step wizard for PRO shop owners to migrate their Telegram channel
 * when the old one gets blocked/banned.
 * 
 * Steps:
 * 1. Check eligibility and show confirmation (subscriber count, limits)
 * 2. Enter new channel URL (with optional old URL)
 * 3. Start broadcast and show progress
 */

import { Scenes, Markup } from 'telegraf';
import api from '../utils/api.js';
import logger from '../utils/logger.js';
import * as smartMessage from '../utils/smartMessage.js';
import { reply as cleanReply, replyHTML as cleanReplyHTML } from '../utils/cleanReply.js';

const migrateChannelScene = new Scenes.WizardScene(
  'migrate_channel',
  
  // Step 1: Check eligibility and confirmation
  async (ctx) => {
    try {
      const shopId = ctx.session.shopId;

      if (!shopId) {
        await smartMessage.send(ctx, { text: '‚ùå –ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.' });
        return ctx.scene.leave();
      }

      // Check eligibility via API
      const token = ctx.session.token;
      const response = await api.get(`/shops/${shopId}/migration/check`, {
        headers: { Authorization: `Bearer ${token}` }
      });

      if (!response.data.eligible) {
        const { error, message } = response.data;
        
        let errorMessage = '‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –∫–∞–Ω–∞–ª–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n\n';
        
        if (error === 'UPGRADE_REQUIRED') {
          errorMessage += 'üíé –≠—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è PRO –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.\n\n';
          errorMessage += '–ü–æ–¥–∫–ª—é—á–∏—Ç–µ PRO –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞ (+$10) —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å:\n';
          errorMessage += '‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –º–∞–≥–∞–∑–∏–Ω—ã\n';
          errorMessage += '‚Ä¢ –†–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –∫–∞–Ω–∞–ª–∞ (2 —Ä–∞–∑–∞/–º–µ—Å—è—Ü)\n';
        } else if (error === 'LIMIT_EXCEEDED') {
          errorMessage += message;
        } else {
          errorMessage += message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.';
        }

        await cleanReply(ctx, errorMessage, Markup.inlineKeyboard([
          [Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'seller:main')]
        ]));
        return ctx.scene.leave();
      }

      // Show confirmation with stats
      const { limits, subscriberCount, shop } = response.data;
      
      let confirmMessage = `‚ö†Ô∏è <b>–ú–∏–≥—Ä–∞—Ü–∏—è Telegram –∫–∞–Ω–∞–ª–∞</b>\n\n`;
      confirmMessage += `üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n`;
      confirmMessage += `‚Ä¢ –ú–∞–≥–∞–∑–∏–Ω: ${shop.name}\n`;
      confirmMessage += `‚Ä¢ –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: ${subscriberCount}\n`;
      confirmMessage += `‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ä–∞—Å—Å—ã–ª–æ–∫: ${limits.used}/${limits.limit} –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ\n`;
      confirmMessage += `‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å: ${limits.remaining}\n\n`;
      
      confirmMessage += `üìÖ –°–ª–µ–¥—É—é—â–∏–π —Å–±—Ä–æ—Å: ${new Date(limits.resetDate).toLocaleDateString('ru-RU')}\n\n`;
      
      confirmMessage += `<b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>\n`;
      confirmMessage += `1. –í—ã —É–∫–∞–∂–µ—Ç–µ –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª\n`;
      confirmMessage += `2. –í—Å–µ–º ${subscriberCount} –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –ø—Ä–∏–¥—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n`;
      confirmMessage += `3. –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–π–º—ë—Ç ~${Math.ceil(subscriberCount * 0.1)} —Å–µ–∫—É–Ω–¥\n\n`;
      
      confirmMessage += `–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?`;

      await cleanReplyHTML(
        ctx,
        confirmMessage,
        Markup.inlineKeyboard([
          [Markup.button.callback('‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', 'migration:proceed')],
          [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'seller:main')]
        ])
      );

      // Save data for next step
      ctx.wizard.state.shopId = shopId;
      ctx.wizard.state.shopName = shop.name;
      ctx.wizard.state.subscriberCount = subscriberCount;

      return ctx.wizard.next();
    } catch (error) {
      logger.error('[MigrateChannel] Step 1 error:', error);
      
      const errorMsg = error.response?.data?.error || error.message;
      await cleanReply(ctx, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: ${errorMsg}`, Markup.inlineKeyboard([
        [Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'seller:main')]
      ]));
      
      return ctx.scene.leave();
    }
  },

  // Step 2: Enter new channel URL
  async (ctx) => {
    // Handle callback from confirmation
    if (ctx.callbackQuery?.data === 'migration:proceed') {
      await ctx.answerCbQuery();
      await ctx.editMessageText(
        'üìù –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ <b>–Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª</b>.\n\n' +
        '–§–æ—Ä–º–∞—Ç: https://t.me/your_new_channel\n\n' +
        '–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ @username –∫–∞–Ω–∞–ª–∞',
        {
          parse_mode: 'HTML',
          ...Markup.inlineKeyboard([
            [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'seller:main')]
          ])
        }
      );
      return;
    }

    // Cancel button
    if (ctx.callbackQuery?.data === 'seller:main') {
      await ctx.answerCbQuery('–ú–∏–≥—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞');
      return ctx.scene.leave();
    }

    // Handle text input (new channel URL)
    if (!ctx.message?.text) {
      await smartMessage.send(ctx, { text: '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª —Ç–µ–∫—Å—Ç–æ–º.' });
      return;
    }

    const newChannelUrl = ctx.message.text.trim();

    // Basic validation
    if (!newChannelUrl.includes('t.me/') && !newChannelUrl.startsWith('@')) {
      await smartMessage.send(ctx, { text: '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n‚Ä¢ https://t.me/channel\n‚Ä¢ @channel' });
      return;
    }

    // Save new channel URL
    ctx.wizard.state.newChannelUrl = newChannelUrl;

    // Ask if there was an old channel
    await cleanReply(
      'üìå –•–æ—Ç–∏—Ç–µ —É–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ä—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª? (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)\n\n' +
      '–≠—Ç–æ –±—É–¥–µ—Ç —É–ø–æ–º—è–Ω—É—Ç–æ –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º.\n\n' +
      '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Ç–∞—Ä—É—é —Å—Å—ã–ª–∫—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"',
      Markup.inlineKeyboard([
        [Markup.button.callback('‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'migration:skip_old')],
        [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'seller:main')]
      ])
    );

    return ctx.wizard.next();
  },

  // Step 3: Handle old URL (optional) and start broadcast
  async (ctx) => {
    let oldChannelUrl = null;

    // Handle skip button
    if (ctx.callbackQuery?.data === 'migration:skip_old') {
      await ctx.answerCbQuery();
      oldChannelUrl = null;
    } 
    // Handle cancel
    else if (ctx.callbackQuery?.data === 'seller:main') {
      await ctx.answerCbQuery('–ú–∏–≥—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞');
      return ctx.scene.leave();
    }
    // Handle text input (old channel URL)
    else if (ctx.message?.text) {
      oldChannelUrl = ctx.message.text.trim();

      // Basic validation
      if (!oldChannelUrl.includes('t.me/') && !oldChannelUrl.startsWith('@')) {
        await smartMessage.send(ctx, { text: '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞. –ù–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ —É–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–π –∫–∞–Ω–∞–ª.' });
        return;
      }
    } else {
      return; // Waiting for input
    }

    try {
      // Show loading message
      const loadingMsg = await smartMessage.send(ctx, { text: '‚è≥ –ó–∞–ø—É—Å–∫–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...' });

      const { shopId, shopName, newChannelUrl, subscriberCount } = ctx.wizard.state;
      const token = ctx.session.token;

      // Initiate broadcast via API (non-blocking)
      const migrationResponse = await api.post(
        `/shops/${shopId}/migration`,
        {
          newChannelUrl,
          oldChannelUrl: oldChannelUrl || undefined
        },
        {
          headers: { Authorization: `Bearer ${token}` }
        }
      );

      const { estimatedDuration, message } = migrationResponse.data;

      // Delete loading message
      await ctx.telegram.deleteMessage(ctx.chat.id, loadingMsg.message_id).catch(() => {});

      // Show success message
      await cleanReplyHTML(
        ctx,
        `‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!</b>\n\n` +
        `üìä –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: ${subscriberCount}\n` +
        `‚è± –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: ~${estimatedDuration} —Å–µ–∫\n\n` +
        `üì¢ –ù–æ–≤—ã–π –∫–∞–Ω–∞–ª: ${newChannelUrl}\n\n` +
        `–í—Å–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ –ø–æ–ª—É—á–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç.`,
        Markup.inlineKeyboard([
          [Markup.button.callback('‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'seller:main')]
        ])
      );

      logger.info(`[MigrateChannel] Broadcast initiated for shop ${shopId}, ${subscriberCount} subscribers, ~${estimatedDuration}s`);

      return ctx.scene.leave();
    } catch (error) {
      logger.error('[MigrateChannel] Broadcast error:', error);
      
      const errorMsg = error.response?.data?.error || error.message;
      await cleanReply(
        ctx,
        `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ: ${errorMsg}`,
        Markup.inlineKeyboard([
          [Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'seller:main')]
        ])
      );
      
      return ctx.scene.leave();
    }
  }
);

// Leave handler
migrateChannelScene.leave(async (ctx) => {
  ctx.wizard.state = {};
  logger.info('[MigrateChannel] Scene left');
});

export default migrateChannelScene;
