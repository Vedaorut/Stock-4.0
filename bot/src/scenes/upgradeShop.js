/**
 * Upgrade Shop Scene
 * 
 * Multi-step wizard for upgrading from BASIC to PRO tier
 * 
 * Steps:
 * 1. Show current subscription and upgrade cost (prorated)
 * 2. Select cryptocurrency
 * 3. Show payment address and amount
 * 4. User sends tx_hash
 * 5. Verify payment and upgrade subscription
 */

import { Scenes, Markup } from 'telegraf';
import api from '../utils/api.js';
import logger from '../utils/logger.js';
import * as smartMessage from '../utils/smartMessage.js';
import { reply as cleanReply, replyHTML as cleanReplyHTML } from '../utils/cleanReply.js';

// Crypto payment addresses (should match backend)
const PAYMENT_ADDRESSES = {
  BTC: process.env.BTC_PAYMENT_ADDRESS || '1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa',
  ETH: process.env.ETH_PAYMENT_ADDRESS || '0x742d35Cc6634C0532925a3b844Bc9e7595f0bEb',
  USDT: process.env.USDT_PAYMENT_ADDRESS || 'TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t',
  LTC: process.env.LTC_PAYMENT_ADDRESS || 'LTC1A2B3C4D5E6F7G8H9J0K1L2M3N4P5Q6R'
};

const upgradeShopScene = new Scenes.WizardScene(
  'upgrade_shop',
  
  // Step 1: Show current subscription and upgrade cost
  async (ctx) => {
    try {
      const shopId = ctx.session.shopId;

      if (!shopId) {
        await smartMessage.send(ctx, { text: '‚ùå –ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.' });
        return ctx.scene.leave();
      }

      const token = ctx.session.token;

      // Get current subscription status
      const statusResponse = await api.get(`/subscriptions/status/${shopId}`, {
        headers: { Authorization: `Bearer ${token}` }
      });

      const { subscription, shop } = statusResponse.data;

      // Check if already PRO
      if (subscription?.tier === 'pro') {
        await cleanReply(
          '‚úÖ –í–∞—à –º–∞–≥–∞–∑–∏–Ω —É–∂–µ –Ω–∞ —Ç–∞—Ä–∏—Ñ–µ PRO üíé',
          Markup.inlineKeyboard([
            [Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'seller:main')]
          ])
        );
        return ctx.scene.leave();
      }

      // Check if has active BASIC subscription
      if (!subscription || subscription.tier !== 'basic' || subscription.status !== 'active') {
        await cleanReply(
          '‚ùå –ê–ø–≥—Ä–µ–π–¥ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö BASIC –ø–æ–¥–ø–∏—Å–æ–∫.\n\n' +
          '–°–Ω–∞—á–∞–ª–∞ –æ–ø–ª–∞—Ç–∏—Ç–µ –±–∞–∑–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É.',
          Markup.inlineKeyboard([
            [Markup.button.callback('üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', 'subscription:pay')],
            [Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'seller:main')]
          ])
        );
        return ctx.scene.leave();
      }

      // Get upgrade cost
      const costResponse = await api.get(`/subscriptions/upgrade-cost/${shopId}`, {
        headers: { Authorization: `Bearer ${token}` }
      });

      const { upgradeCost, remainingDays, periodEnd } = costResponse.data;

      let message = `üíé <b>–ê–ø–≥—Ä–µ–π–¥ –Ω–∞ PRO</b>\n\n`;
      message += `üè™ –ú–∞–≥–∞–∑–∏–Ω: ${shop.name}\n\n`;
      message += `üìä <b>–¢–µ–∫—É—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞:</b>\n`;
      message += `‚Ä¢ –¢–∞—Ä–∏—Ñ: BASIC\n`;
      message += `‚Ä¢ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ${new Date(periodEnd).toLocaleDateString('ru-RU')}\n`;
      message += `‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: ${remainingDays}\n\n`;
      message += `üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–ø–≥—Ä–µ–π–¥–∞:</b>\n`;
      message += `<b>$${upgradeCost.toFixed(2)}</b> (–ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)\n\n`;
      message += `üéÅ <b>–í—ã –ø–æ–ª—É—á–∏—Ç–µ:</b>\n`;
      message += `‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏\n`;
      message += `‚Ä¢ –†–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –∫–∞–Ω–∞–ª–∞ (2/–º–µ—Å)\n`;
      message += `‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n`;
      message += `–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∞–ø–≥—Ä–µ–π–¥?`;

      await cleanReplyHTML(
        ctx,
        message,
        Markup.inlineKeyboard([
          [Markup.button.callback('‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', 'upgrade:confirm')],
          [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'seller:main')]
        ])
      );

      // Save data for next steps
      ctx.wizard.state.shopId = shopId;
      ctx.wizard.state.shopName = shop.name;
      ctx.wizard.state.upgradeCost = upgradeCost;
      ctx.wizard.state.remainingDays = remainingDays;

      return ctx.wizard.next();
    } catch (error) {
      logger.error('[UpgradeShop] Step 1 error:', error);
      
      const errorMsg = error.response?.data?.error || error.message;
      await cleanReply(ctx, `‚ùå –û—à–∏–±–∫–∞: ${errorMsg}`, Markup.inlineKeyboard([
        [Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'seller:main')]
      ]));
      
      return ctx.scene.leave();
    }
  },

  // Step 2: Handle confirmation and show crypto options
  async (ctx) => {
    if (!ctx.callbackQuery) {
      return;
    }

    const data = ctx.callbackQuery.data;

    // Handle cancel
    if (data === 'seller:main') {
      await ctx.answerCbQuery('–ê–ø–≥—Ä–µ–π–¥ –æ—Ç–º–µ–Ω—ë–Ω');
      return ctx.scene.leave();
    }

    if (data !== 'upgrade:confirm') {
      await ctx.answerCbQuery('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä');
      return;
    }

    await ctx.answerCbQuery();

    const { upgradeCost } = ctx.wizard.state;

    let message = `üíé <b>–ê–ø–≥—Ä–µ–π–¥ –Ω–∞ PRO</b>\n\n`;
    message += `üíµ –°—É–º–º–∞: $${upgradeCost.toFixed(2)}\n\n`;
    message += `–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –æ–ø–ª–∞—Ç—ã:`;

    await ctx.editMessageText(
      message,
      {
        parse_mode: 'HTML',
        ...Markup.inlineKeyboard([
          [Markup.button.callback('‚Çø Bitcoin (BTC)', 'upgrade:crypto:BTC')],
          [Markup.button.callback('Œû Ethereum (ETH)', 'upgrade:crypto:ETH')],
          [Markup.button.callback('üíµ USDT (TRC-20)', 'upgrade:crypto:USDT')],
          [Markup.button.callback('≈Å Litecoin (LTC)', 'upgrade:crypto:LTC')],
          [Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'upgrade:back')],
          [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'seller:main')]
        ])
      }
    );

    return ctx.wizard.next();
  },

  // Step 3: Handle crypto selection and show payment address
  async (ctx) => {
    if (!ctx.callbackQuery) {
      return;
    }

    const data = ctx.callbackQuery.data;

    // Handle back
    if (data === 'upgrade:back') {
      await ctx.answerCbQuery();
      return ctx.wizard.back();
    }

    // Handle cancel
    if (data === 'seller:main') {
      await ctx.answerCbQuery('–ê–ø–≥—Ä–µ–π–¥ –æ—Ç–º–µ–Ω—ë–Ω');
      return ctx.scene.leave();
    }

    // Parse crypto selection
    if (!data.startsWith('upgrade:crypto:')) {
      await ctx.answerCbQuery('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä');
      return;
    }

    const currency = data.replace('upgrade:crypto:', '');
    if (!['BTC', 'ETH', 'USDT', 'LTC'].includes(currency)) {
      await ctx.answerCbQuery('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞');
      return;
    }

    await ctx.answerCbQuery();

    const { upgradeCost } = ctx.wizard.state;
    const paymentAddress = PAYMENT_ADDRESSES[currency];

    ctx.wizard.state.currency = currency;
    ctx.wizard.state.paymentAddress = paymentAddress;

    let message = `üí≥ <b>–î–µ—Ç–∞–ª–∏ –æ–ø–ª–∞—Ç—ã –∞–ø–≥—Ä–µ–π–¥–∞</b>\n\n`;
    message += `üíé –ê–ø–≥—Ä–µ–π–¥: BASIC ‚Üí PRO\n`;
    message += `üíµ –°—É–º–º–∞: $${upgradeCost.toFixed(2)}\n`;
    message += `ü™ô –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞: ${currency}\n\n`;
    message += `üì¨ <b>–ê–¥—Ä–µ—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b>\n`;
    message += `<code>${paymentAddress}</code>\n\n`;
    message += `‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b>\n`;
    message += `1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É –≤ ${currency}\n`;
    message += `2. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ Transaction Hash (TX Hash)\n`;
    message += `3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º\n\n`;
    message += `üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ TX Hash –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:`;

    await ctx.editMessageText(
      message,
      {
        parse_mode: 'HTML',
        ...Markup.inlineKeyboard([
          [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'seller:main')]
        ])
      }
    );

    return ctx.wizard.next();
  },

  // Step 4: Handle tx_hash and verify upgrade payment
  async (ctx) => {
    // Handle cancel button
    if (ctx.callbackQuery?.data === 'seller:main') {
      await ctx.answerCbQuery('–ê–ø–≥—Ä–µ–π–¥ –æ—Ç–º–µ–Ω—ë–Ω');
      return ctx.scene.leave();
    }

    // Wait for text message with tx_hash
    if (!ctx.message?.text) {
      await smartMessage.send(ctx, { text: '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ Transaction Hash —Ç–µ–∫—Å—Ç–æ–º.' });
      return;
    }

    const txHash = ctx.message.text.trim();

    // Basic validation
    if (txHash.length < 10) {
      await smartMessage.send(ctx, { text: '‚ùå TX Hash —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–Ω–æ–≤–∞.' });
      return;
    }

    try {
      const loadingMsg = await smartMessage.send(ctx, { text: '‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –∞–ø–≥—Ä–µ–π–¥...\n\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 30 —Å–µ–∫—É–Ω–¥.' });

      const { shopId, currency, paymentAddress } = ctx.wizard.state;
      const token = ctx.session.token;

      // Verify and upgrade via backend
      const upgradeResponse = await api.post(
        '/subscriptions/upgrade',
        {
          shopId,
          txHash,
          currency,
          paymentAddress
        },
        {
          headers: { Authorization: `Bearer ${token}` }
        }
      );

      const { subscription, upgradedAmount, message } = upgradeResponse.data;

      // Delete loading message
      await ctx.telegram.deleteMessage(ctx.chat.id, loadingMsg.message_id).catch(() => {});

      // Show success
      let successMessage = `üéâ <b>–ê–ø–≥—Ä–µ–π–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!</b>\n\n`;
      successMessage += `üíé –ù–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ: PRO\n`;
      successMessage += `üíµ –û–ø–ª–∞—á–µ–Ω–æ: $${upgradedAmount.toFixed(2)}\n`;
      successMessage += `üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ${new Date(subscription.periodEnd).toLocaleDateString('ru-RU')}\n\n`;
      successMessage += `‚ú® <b>–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n`;
      successMessage += `‚Ä¢ ‚ôæ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏\n`;
      successMessage += `‚Ä¢ üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –∫–∞–Ω–∞–ª–∞ (2/–º–µ—Å)\n`;
      successMessage += `‚Ä¢ ‚≠êÔ∏è –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n`;
      successMessage += `–°–ø–∞—Å–∏–±–æ! –í–∞—à –º–∞–≥–∞–∑–∏–Ω —Ç–µ–ø–µ—Ä—å PRO üíé`;

      await cleanReplyHTML(
        ctx,
        successMessage,
        Markup.inlineKeyboard([
          [Markup.button.callback('‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'seller:main')]
        ])
      );

      logger.info(`[UpgradeShop] Upgrade successful: shop ${shopId}, tx ${txHash}, amount $${upgradedAmount}`);

      return ctx.scene.leave();
    } catch (error) {
      logger.error('[UpgradeShop] Upgrade verification error:', error);
      
      let errorMessage = '‚ùå <b>–û—à–∏–±–∫–∞ –∞–ø–≥—Ä–µ–π–¥–∞</b>\n\n';
      
      const errorData = error.response?.data;
      if (errorData?.error === 'NOT_FREE_TIER' || errorData?.error === 'NOT_BASIC_TIER') {
        errorMessage += '‚ö†Ô∏è –ê–ø–≥—Ä–µ–π–¥ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è BASIC —Ç–∞—Ä–∏—Ñ–∞.\n\n';
        errorMessage += '–í–∞—à–∞ —Ç–µ–∫—É—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∞–ø–≥—Ä–µ–π–¥–∞.';
      } else if (errorData?.error === 'DUPLICATE_TX_HASH') {
        errorMessage += '‚ö†Ô∏è –≠—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–∂–µ –±—ã–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞.\n\n';
        errorMessage += '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π TX Hash –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂.';
      } else if (errorData?.error === 'PAYMENT_VERIFICATION_FAILED') {
        errorMessage += '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–ª–∞—Ç—ë–∂.\n\n';
        errorMessage += '–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n';
        errorMessage += '‚Ä¢ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –µ—â—ë –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –≤ –±–ª–æ–∫—á–µ–π–Ω–µ\n';
        errorMessage += '‚Ä¢ –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –∏–ª–∏ –∞–¥—Ä–µ—Å\n';
        errorMessage += '‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π TX Hash\n\n';
        errorMessage += '–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
      } else {
        errorMessage += errorData?.message || error.message;
      }

      await cleanReplyHTML(
        ctx,
        errorMessage,
        Markup.inlineKeyboard([
          [Markup.button.callback('üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', 'upgrade:retry')],
          [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'seller:main')]
        ])
      );

      return; // Stay in this step for retry
    }
  }
);

// Leave handler
upgradeShopScene.leave(async (ctx) => {
  ctx.wizard.state = {};
  logger.info('[UpgradeShop] Scene left');
});

export default upgradeShopScene;
