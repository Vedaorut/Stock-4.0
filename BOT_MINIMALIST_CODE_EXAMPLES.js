/**
 * BOT_MINIMALIST_IMPL_UTILS.js
 * 
 * Ready-to-use utility functions for implementing minimalist design patterns
 * in the Status Stock Telegram bot.
 */

export const formatProductsList = (products, shopName) => {
  if (!products || products.length === 0) {
    return `üì¶ –¢–æ–≤–∞—Ä—ã\n–ü—É—Å—Ç–æ`;
  }

  let msg = `üì¶ –¢–æ–≤–∞—Ä—ã (${products.length}) ‚Ä¢ ${shopName}\n`;
  
  const toShow = products.slice(0, 5);
  toShow.forEach((p, i) => {
    const stock = p.stock_quantity || p.stockQuantity || 0;
    const stockStatus = getStockStatus(stock);
    msg += `${i + 1}. ${p.name} ‚Äî \$${parseFloat(p.price).toFixed(0)} | ${stockStatus}\n`;
  });

  if (products.length > 5) {
    msg += `\n+${products.length - 5} –µ—â—ë`;
  }

  return msg;
};

export const formatSalesList = (orders, shopName) => {
  if (!orders || orders.length === 0) {
    return `üí∞ –ü—Ä–æ–¥–∞–∂–∏\n–ü—É—Å—Ç–æ`;
  }

  let msg = `üí∞ –ü—Ä–æ–¥–∞–∂–∏ (${orders.length}) ‚Ä¢ ${shopName}\n`;

  const toShow = orders.slice(0, 5);
  toShow.forEach((o, i) => {
    const username = o.buyer_username
      ? o.buyer_username.slice(0, 15)
      : (o.buyer_first_name || '–ü–æ–∫—É–ø–∞—Ç–µ–ª—å');
    const status = getOrderStatusEmoji(o.status);
    const price = parseFloat(o.total_price || o.totalPrice || 0).toFixed(0);

    msg += `${i + 1}. ${status} @${username} ‚Äî \$${price}\n`;
  });

  if (orders.length > 5) {
    msg += `\n+${orders.length - 5} –µ—â—ë`;
  }

  return msg;
};

export const formatBuyerOrders = (orders) => {
  if (!orders || orders.length === 0) {
    return `üõí –ó–∞–∫–∞–∑—ã\n–ü—É—Å—Ç–æ`;
  }

  let msg = `üõí –ó–∞–∫–∞–∑—ã (${orders.length})\n`;

  const toShow = orders.slice(0, 5);
  toShow.forEach((o, i) => {
    const shopName = o.shop_name || '–ú–∞–≥–∞–∑–∏–Ω';
    const status = getOrderStatusEmoji(o.status);
    const price = parseFloat(o.total_price || o.totalPrice || 0).toFixed(0);

    msg += `${i + 1}. ${status} ${shopName} ‚Äî \$${price}\n`;
  });

  if (orders.length > 5) {
    msg += `\n+${orders.length - 5} –µ—â—ë`;
  }

  return msg;
};

export const formatSubscriptions = (subscriptions) => {
  if (!subscriptions || subscriptions.length === 0) {
    return `üìö –ü–æ–¥–ø–∏—Å–∫–∏\n–ü—É—Å—Ç–æ`;
  }

  let msg = `üìö –ü–æ–¥–ø–∏—Å–∫–∏ (${subscriptions.length})\n`;

  subscriptions.slice(0, 10).forEach((sub, i) => {
    const shopName = sub.shop_name || sub.shopName || '–ú–∞–≥–∞–∑–∏–Ω';
    msg += `${i + 1}. ${shopName}\n`;
  });

  if (subscriptions.length > 10) {
    msg += `\n+${subscriptions.length - 10} –µ—â—ë`;
  }

  return msg;
};

export const getStockStatus = (quantity) => {
  if (quantity === 0) return '–Ω–µ—Ç';
  if (quantity <= 3) return `${quantity} —à—Ç`;
  return '–µ—Å—Ç—å';
};

export const getOrderStatusEmoji = (status) => {
  const map = {
    'pending': '‚è≥',
    'completed': '‚úÖ',
    'cancelled': '‚ùå',
    'processing': 'üì¶',
    'failed': '‚ùå'
  };
  return map[status] || 'üì¶';
};

export const successMessage = (title, details = '') => {
  let msg = `‚úÖ ${title}`;
  if (details) {
    msg += `\n${details}`;
  }
  return msg;
};

export const errorMessage = (action, reason = '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ') => {
  return `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å ${action}\n${reason}`;
};
